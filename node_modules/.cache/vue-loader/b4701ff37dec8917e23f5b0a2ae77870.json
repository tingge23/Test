{"remainingRequest":"H:\\VSCode projects\\TodoList-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!H:\\VSCode projects\\TodoList-master\\src\\views\\Home.vue?vue&type=script&lang=js&","dependencies":[{"path":"H:\\VSCode projects\\TodoList-master\\src\\views\\Home.vue","mtime":1622795616726},{"path":"H:\\VSCode projects\\TodoList-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"H:\\VSCode projects\\TodoList-master\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"H:\\VSCode projects\\TodoList-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"H:\\VSCode projects\\TodoList-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Content from '@/components/Content.vue'\n//存取localStorage中的数据\nconst store = {\n    saveList(key,value){\n        window.localStorage.setItem(key,JSON.stringify(value));\n    },\n    fetchList(key){\n     return JSON.parse(window.localStorage.getItem(key))||[];\n    }\n}\nconst list = store.fetchList(\"storeData\");\n\n //const list = [{\n  // id: 0,\n  //content:\"todo1\",\n  // complete: true,\n  // edit: false\n //},{\n   //id: 1,\n  // content:\"todo2\",\n  // complete: false,\n  // edit: false\n //}];\nexport default {\n  name: 'Home',\n  components: {\n    Content,\n  },\n  data () {\n    return {\n      list,\n      inputValue: \"\",\n      type: \"All\",\n      originContent: \"\"\n    }\n  },\n  watch:{\n     //list:function(){\n     //  store.saveList(\"storeData\",this.list);\n     //}\n    list:{\n      handler(){\n          store.saveList(\"storeData\",this.list);\n      },\n      deep:true\n    }\n  },\n\n  methods:{\n    handleInput(){\n      console.log(this.inputValue)\n      //console.log(this.item.content)\n        var newlist= this.list.filter(item=> {\n        item.indexOf(this.inputValue)>-1})\n      console.log(newlist) \n    },\n\n    handleAddList(e){\n      const last = this.list[this.list.length - 1];\n      const id = last ? last.id + 1 : 1;\n      if(e.target.value){\n        this.list.push({\n          id: id, \n          content: e.target.value, \n          complete: false,\n          edit: false\n        });\n        this.inputValue= \"\";\n      }else{\n        alert('您未输入任何任务');\n      }\n    },\n    handleAddBtnList(){\n      const last = this.list[this.list.length - 1];\n      const id = last ? last.id + 1 : 1;\n      if(this.inputValue){\n        this.list.push({\n          id: id, \n          content: this.inputValue, \n          complete: false,\n          edit: false\n        });\n        this.inputValue= \"\";\n      }else{\n        alert('您未输入任何任务');\n      }\n    },\n    handleDelete (index){\n      const conf = confirm(\"确定删除这项吗\");\n      if (conf){\n        this.list.splice(index,1);\n      }else{\n        alert(\"删除取消\");\n      }\n    },\n    handleComplete(item){\n      item.complete = !item.complete;\n    },\n    handleDeleteAllComplete() {\n      const confDelete = confirm(\"确定删除所选项吗\");\n      if (confDelete){\n        this.list = this.list.filter(item => {\n          return !item.complete;\n        });\n      }else{\n        alert(\"删除取消\");\n      }\n    },\n    handleCheckedAll(e){\n      this.list.forEach(item => {\n          item.complete = e.target.checked;\n      });\n    },\n    handleSelectAll(){\n      this.type = \"All\";\n    },\n    handleSelectComplete(){\n      this.type = \"Complete\";\n    },\n    handleSelectUnComplete(){\n      this.type = \"UnComplete\";\n    },\n    handleClickEdit(item){\n      item.edit = !item.edit;\n      this.originContent = item.content;\n    },\n    handleEditCancel(item){\n      item.edit = false;\n      item.content = this.originContent;\n    },\n    handleEditBlur(item){\n      item.edit = false;\n    },\n    handleInputEdit(item, index, e){\n      if (!e.target.value.length) {\n        return this.list.splice(index, 1);\n      }\n      item.content = e.target.value;\n      item.edit = false;\n      item.complete = false;\n    }\n  },\n  computed: {\n    getCountComputed() {\n      return this.list.filter(item => {\n          return item.complete;\n      }).length;\n    },\n    getCountAllComputed() {\n      return this.list.length\n    },\n    getCountUnComputed() {\n      return this.list.filter(item => {\n          return !item.complete;\n      }).length;\n    },\n    selectList() {\n      switch (this.type){\n        case \"UnComplete\":\n          return this.list.filter(item => {\n            return !item.complete;\n          });\n        case \"Complete\":\n          return this.list.filter(item => {\n            return item.complete;\n          });\n        case \"All\":\n          return this.list;\n        default:\n          return this.list;\n      }\n    }\n  },\n}\n",{"version":3,"sources":["Home.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmfile":"Home.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"home\">\n    <header>\n      <h1>HelloAlexCc</h1>\n    </header>\n    <div class=\"input-group mb-3 my-input\">\n      <input type=\"text\" class=\"form-control\" \n        placeholder=\"添加你的任务\" \n        aria-label=\"Recipient's username\" \n        aria-describedby=\"basic-addon2\"\n        autofocus \n        @keyup.enter=\"handleAddList\"\n        v-model=\"inputValue\"\n        @input =\" handleInput()\"\n        \n      />\n      <div class=\"input-group-append my-button\">\n        <button \n        type=\"button\" \n        class=\"btn btn-outline-primary\" \n        @click=\"handleAddBtnList\"\n        >\n        添加\n        </button>\n      </div>\n    </div>\n    <Content\n      :type=\"type\"\n      :list=\"selectList\"\n      :CountUnComputed=\"getCountUnComputed\"\n      @delete=\"handleDelete\"\n      @complete=\"handleComplete\"\n      @delcomplete=\"handleDeleteAllComplete\"\n      @checked=\"handleCheckedAll\"\n      @all=\"handleSelectAll\"\n      @has=\"handleSelectComplete\"\n      @un=\"handleSelectUnComplete\"  \n      @edit=\"handleClickEdit\"\n      @bledit=\"handleEditBlur\"\n      @cancel=\"handleEditCancel\"\n      @save=\"handleInputEdit\"\n    />\n    <div class=\"home-footer\">\n      <span>共{{getCountAllComputed}}项任务</span>,\n      <span class=\"complete\">已完成{{getCountComputed}}项</span>,\n      <span class=\"unComplete\">未完成{{getCountUnComputed}}项</span>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Content from '@/components/Content.vue'\n//存取localStorage中的数据\nconst store = {\n    saveList(key,value){\n        window.localStorage.setItem(key,JSON.stringify(value));\n    },\n    fetchList(key){\n     return JSON.parse(window.localStorage.getItem(key))||[];\n    }\n}\nconst list = store.fetchList(\"storeData\");\n\n //const list = [{\n  // id: 0,\n  //content:\"todo1\",\n  // complete: true,\n  // edit: false\n //},{\n   //id: 1,\n  // content:\"todo2\",\n  // complete: false,\n  // edit: false\n //}];\nexport default {\n  name: 'Home',\n  components: {\n    Content,\n  },\n  data () {\n    return {\n      list,\n      inputValue: \"\",\n      type: \"All\",\n      originContent: \"\"\n    }\n  },\n  watch:{\n     //list:function(){\n     //  store.saveList(\"storeData\",this.list);\n     //}\n    list:{\n      handler(){\n          store.saveList(\"storeData\",this.list);\n      },\n      deep:true\n    }\n  },\n\n  methods:{\n    handleInput(){\n      console.log(this.inputValue)\n      //console.log(this.item.content)\n        var newlist= this.list.filter(item=> {\n        item.indexOf(this.inputValue)>-1})\n      console.log(newlist) \n    },\n\n    handleAddList(e){\n      const last = this.list[this.list.length - 1];\n      const id = last ? last.id + 1 : 1;\n      if(e.target.value){\n        this.list.push({\n          id: id, \n          content: e.target.value, \n          complete: false,\n          edit: false\n        });\n        this.inputValue= \"\";\n      }else{\n        alert('您未输入任何任务');\n      }\n    },\n    handleAddBtnList(){\n      const last = this.list[this.list.length - 1];\n      const id = last ? last.id + 1 : 1;\n      if(this.inputValue){\n        this.list.push({\n          id: id, \n          content: this.inputValue, \n          complete: false,\n          edit: false\n        });\n        this.inputValue= \"\";\n      }else{\n        alert('您未输入任何任务');\n      }\n    },\n    handleDelete (index){\n      const conf = confirm(\"确定删除这项吗\");\n      if (conf){\n        this.list.splice(index,1);\n      }else{\n        alert(\"删除取消\");\n      }\n    },\n    handleComplete(item){\n      item.complete = !item.complete;\n    },\n    handleDeleteAllComplete() {\n      const confDelete = confirm(\"确定删除所选项吗\");\n      if (confDelete){\n        this.list = this.list.filter(item => {\n          return !item.complete;\n        });\n      }else{\n        alert(\"删除取消\");\n      }\n    },\n    handleCheckedAll(e){\n      this.list.forEach(item => {\n          item.complete = e.target.checked;\n      });\n    },\n    handleSelectAll(){\n      this.type = \"All\";\n    },\n    handleSelectComplete(){\n      this.type = \"Complete\";\n    },\n    handleSelectUnComplete(){\n      this.type = \"UnComplete\";\n    },\n    handleClickEdit(item){\n      item.edit = !item.edit;\n      this.originContent = item.content;\n    },\n    handleEditCancel(item){\n      item.edit = false;\n      item.content = this.originContent;\n    },\n    handleEditBlur(item){\n      item.edit = false;\n    },\n    handleInputEdit(item, index, e){\n      if (!e.target.value.length) {\n        return this.list.splice(index, 1);\n      }\n      item.content = e.target.value;\n      item.edit = false;\n      item.complete = false;\n    }\n  },\n  computed: {\n    getCountComputed() {\n      return this.list.filter(item => {\n          return item.complete;\n      }).length;\n    },\n    getCountAllComputed() {\n      return this.list.length\n    },\n    getCountUnComputed() {\n      return this.list.filter(item => {\n          return !item.complete;\n      }).length;\n    },\n    selectList() {\n      switch (this.type){\n        case \"UnComplete\":\n          return this.list.filter(item => {\n            return !item.complete;\n          });\n        case \"Complete\":\n          return this.list.filter(item => {\n            return item.complete;\n          });\n        case \"All\":\n          return this.list;\n        default:\n          return this.list;\n      }\n    }\n  },\n}\n</script>\n<style lang=\"less\" scoped>\n  .home{\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    header{\n      margin-bottom: 5%;\n      padding-top: 1%;\n      h1{\n        color: #fff;\n        font-size: px;\n      }\n    }\n    .my-input{\n      width: 35%;\n      input{\n        border-radius: 4%;\n      }\n      .my-button{\n        margin-left: 30%;\n        button{\n          border-radius: 10%;\n          color: #fff;\n        }\n      }\n    }\n    .home-footer{\n      width: 35%;\n      padding: 1% 0;\n      background:oldlace;\n      .complete{\n        color:rgb(75, 17, 209);\n      }\n      .unComplete{\n        color: #f00;\n      }\n    }\n  }\n</style>\n"]}]}